freqEdges
(3, 8, 1)
(1, 3, 2)
(1, 8, 3)
end freq edges
Frequent edges 3
C in
 dict_keys(['[[3 1]\n [1 8]]', '[[1 2]\n [2 3]]', '[[1 3]\n [3 8]]'])
timestamp 2020-06-07 10:10:56.823268
begin frequent trees
timestamp frequent trees 2 2020-06-07 10:10:56.823268
After S-freq dict_keys(['[[3 1 2]\n [1 8 0]\n [2 0 1]]', '[[3 1 0]\n [1 8 3]\n [0 3 1]]'])
C in
 dict_keys(['[[3 1 2]\n [1 8 0]\n [2 0 1]]', '[[3 1 0]\n [1 8 3]\n [0 3 1]]'])
timestamp 2020-06-07 10:10:56.827264
begin frequent trees
timestamp frequent trees 2 2020-06-07 10:10:56.828264
After S-freq dict_keys([])
C in
 dict_keys([])
timestamp 2020-06-07 10:10:56.830262
numEmbedding 4
hasNoAss
ok expansion [[3 1 2]
 [1 8 0]
 [2 0 1]]
associate edges [(1, 2, 3)]
begin frequent trees
timestamp frequent trees 2 2020-06-07 10:10:56.832261
After S-freq dict_keys([])
C in
 dict_keys([])
timestamp 2020-06-07 10:10:56.835260
numEmbedding 4
hasNoAss
ok expansion [[3 1 0]
 [1 8 3]
 [0 3 1]]
associate edges [(0, 2, 2)]
bottom-up aval [[3 1 2]
 [1 8 3]
 [2 3 1]]
end searchGraphs
eqGraphClass {'[[3 1 0]\n [1 8 3]\n [0 3 1]]': {0: [array([0, 1, 2], dtype=int64)], 1: [array([0, 1, 3], dtype=int64)], 2: [array([0, 1, 2], dtype=int64)], 3: [array([1, 2, 3], dtype=int64)]}, '[[3 1 2]\n [1 8 3]\n [2 3 1]]': {0: [array([0, 1, 2], dtype=int64)], 1: [array([0, 1, 3], dtype=int64)], 2: [array([0, 1, 2], dtype=int64)], 3: [array([1, 2, 3], dtype=int64)]}}
numEmbedding 4
hasExternalAssEdge [[3 1]
 [1 8]]
begin frequent trees
timestamp frequent trees 2 2020-06-07 10:10:56.844269
After S-freq dict_keys(['[[1 2 3]\n [2 3 0]\n [3 0 8]]', '[[1 2 0]\n [2 3 1]\n [0 1 8]]'])
C in
 dict_keys(['[[1 2 3]\n [2 3 0]\n [3 0 8]]'])
timestamp 2020-06-07 10:10:56.850251
begin frequent trees
timestamp frequent trees 2 2020-06-07 10:10:56.850251
After S-freq dict_keys([])
C in
 dict_keys([])
timestamp 2020-06-07 10:10:56.854249
numEmbedding 4
hasNoAss
ok expansion [[1 2 3]
 [2 3 0]
 [3 0 8]]
associate edges [(1, 2, 1)]
numEmbedding 4
hasExternalAssEdge [[1 2]
 [2 3]]
begin frequent trees
timestamp frequent trees 2 2020-06-07 10:10:56.857247
After S-freq dict_keys(['[[1 3 2]\n [3 8 0]\n [2 0 3]]', '[[1 3 0]\n [3 8 1]\n [0 1 3]]'])
C in
 dict_keys([])
timestamp 2020-06-07 10:10:56.863244
numEmbedding 4
hasExternalAssEdge [[1 3]
 [3 8]]
S-final {'[[3 1]\n [1 8]]': {0: [array([0, 1], dtype=int64)], 1: [array([0, 1], dtype=int64)], 2: [array([0, 1], dtype=int64)], 3: [array([1, 2], dtype=int64)]}, '[[3 1 2]\n [1 8 0]\n [2 0 1]]': {0: [array([0, 1, 2], dtype=int64)], 1: [array([0, 1, 3], dtype=int64)], 2: [array([0, 1, 2], dtype=int64)], 3: [array([1, 2, 3], dtype=int64)]}, '[[3 1 0]\n [1 8 3]\n [0 3 1]]': {0: [array([0, 1, 2], dtype=int64)], 1: [array([0, 1, 3], dtype=int64)], 2: [array([0, 1, 2], dtype=int64)], 3: [array([1, 2, 3], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([2, 0], dtype=int64)], 1: [array([3, 0], dtype=int64)], 2: [array([2, 0], dtype=int64)], 3: [array([3, 1], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([2, 0, 1], dtype=int64)], 1: [array([3, 0, 1], dtype=int64)], 2: [array([2, 0, 1], dtype=int64)], 3: [array([3, 1, 2], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([2, 1], dtype=int64)], 1: [array([3, 1], dtype=int64)], 2: [array([2, 1], dtype=int64)], 3: [array([3, 2], dtype=int64)]}}
final result dict_keys(['[[3 1 0]\n [1 8 3]\n [0 3 1]]', '[[3 1 2]\n [1 8 3]\n [2 3 1]]'])
freqGraphs [array([[3, 1, 2],
       [1, 8, 3],
       [2, 3, 1]])]
