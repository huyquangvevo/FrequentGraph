inInitTemp {(3, 8, 1): {0: [(0, 1)], 1: [(0, 1)], 2: [(0, 1)], 3: [(1, 2)]}, (1, 3, 2): {0: [(2, 0)], 1: [(3, 0)], 2: [(2, 0)], 3: [(3, 1)]}, (1, 8, 3): {0: [(2, 1)], 1: [(3, 1)], 2: [(2, 1)], 3: [(3, 2)]}}
done init tempTree {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
C in
 {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
Temptrees {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
X in [[3 1]
 [1 8]]
C X in [array([[3, 1],
       [1, 8]]), array([[1, 2],
       [2, 3]]), array([[1, 3],
       [3, 8]])]
XX [[3 1]
 [1 8]]
YY [[3 1]
 [1 8]]
can join []
candidates []
XX [[3 1]
 [1 8]]
YY [[1 2]
 [2 3]]
can join []
candidates []
XX [[3 1]
 [1 8]]
YY [[1 3]
 [3 8]]
can join []
candidates []
temp {}
S freq {}
C in
 {}
Temptrees {}
Q {}
R {}
S empty {}
R empty {}
U empty {}
V empty {}
X ok ex [[3 1]
 [1 8]]
encode X [[3 1]
 [1 8]]
ok expansion {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
matrix [[3 1]
 [1 8]]
indices (array([], dtype=int64), array([], dtype=int64))
canEdges []
result {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
subgraph [[3 1]
 [1 8]]
can subgraph 8$1_3$#
tree [[3 1]
 [1 8]]
canTree 8$1_3$#
eqGraphClass {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
expansion X {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
X in [[1 2]
 [2 3]]
C X in [array([[3, 1],
       [1, 8]]), array([[1, 2],
       [2, 3]]), array([[1, 3],
       [3, 8]])]
XX [[1 2]
 [2 3]]
YY [[3 1]
 [1 8]]
can join []
candidates [array([[1, 2, 0],
       [2, 3, 1],
       [0, 1, 8]])]
XX [[1 2]
 [2 3]]
YY [[1 2]
 [2 3]]
can join []
candidates []
XX [[1 2]
 [2 3]]
YY [[1 3]
 [3 8]]
can join [array([[1, 2, 3],
       [2, 3, 0],
       [3, 0, 8]])]
candidates [array([[1, 2, 3],
       [2, 3, 0],
       [3, 0, 8]])]
temp {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 1: [array([[3, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 2: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 3: [array([[3, 2, 0],
       [2, 1, 1],
       [0, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 0],
       [3, 0, 2]], dtype=int64)]}}
S freq {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 1: [array([[3, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 2: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 3: [array([[3, 2, 0],
       [2, 1, 1],
       [0, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 0],
       [3, 0, 2]], dtype=int64)]}}
C in
 {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 1: [array([[3, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 2: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 3: [array([[3, 2, 0],
       [2, 1, 1],
       [0, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 0],
       [3, 0, 2]], dtype=int64)]}}
Temptrees {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 1: [array([[3, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 2: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 3: [array([[3, 2, 0],
       [2, 1, 1],
       [0, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 0],
       [3, 0, 2]], dtype=int64)]}}
X in [[1 2 0]
 [2 3 1]
 [0 1 8]]
C X in [array([[1, 2, 0],
       [2, 3, 1],
       [0, 1, 8]]), array([[1, 2, 3],
       [2, 3, 0],
       [3, 0, 8]])]
XX [[1 2 0]
 [2 3 1]
 [0 1 8]]
YY [[1 2 0]
 [2 3 1]
 [0 1 8]]
can join []
candidates []
XX [[1 2 0]
 [2 3 1]
 [0 1 8]]
YY [[1 2 3]
 [2 3 0]
 [3 0 8]]
can join [array([[1, 2, 0, 3],
       [2, 3, 1, 0],
       [0, 1, 8, 0],
       [3, 0, 0, 8]])]
candidates [array([[1, 2, 0, 3],
       [2, 3, 1, 0],
       [0, 1, 8, 0],
       [3, 0, 0, 8]])]
temp {}
S freq {}
C in
 {}
Temptrees {}
Q {}
R {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
S empty {}
R empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
U empty {}
V empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
X ok ex [[1 2 0]
 [2 3 1]
 [0 1 8]]
encode X [[1 2 0]
 [2 3 1]
 [0 1 8]]
ok expansion {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 1: [array([[3, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 2: [array([[2, 2, 0],
       [2, 0, 1],
       [0, 1, 1]], dtype=int64)], 3: [array([[3, 2, 0],
       [2, 1, 1],
       [0, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 0],
       [3, 0, 2]], dtype=int64)]}}
matrix [[1 2 0]
 [2 3 1]
 [0 1 8]]
indices (array([0, 2], dtype=int64), array([2, 0], dtype=int64))
canEdges [(0, 2, 3)]
result {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
subgraph [[1 2 3]
 [2 3 1]
 [3 1 8]]
can subgraph 8$3_1_1_3$#
tree [[1 2 0]
 [2 3 1]
 [0 1 8]]
canTree 8$1_3$2_1$#
subgraph [[1 2 3]
 [2 3 1]
 [3 1 8]]
can subgraph 8$3_1_1_3$#
tree [[1 2 0]
 [2 3 1]
 [0 1 8]]
canTree 8$1_3$2_1$#
eqGraphClass {'[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
expansion X {'[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
X in [[1 2 3]
 [2 3 0]
 [3 0 8]]
C X in [array([[1, 2, 0],
       [2, 3, 1],
       [0, 1, 8]]), array([[1, 2, 3],
       [2, 3, 0],
       [3, 0, 8]])]
XX [[1 2 3]
 [2 3 0]
 [3 0 8]]
YY [[1 2 0]
 [2 3 1]
 [0 1 8]]
can join [array([[1, 2, 3, 0],
       [2, 3, 0, 1],
       [3, 0, 8, 0],
       [0, 1, 0, 8]])]
candidates [array([[1, 2, 3, 0],
       [2, 3, 0, 1],
       [3, 0, 8, 0],
       [0, 1, 0, 8]])]
XX [[1 2 3]
 [2 3 0]
 [3 0 8]]
YY [[1 2 3]
 [2 3 0]
 [3 0 8]]
can join []
candidates []
temp {}
S freq {}
C in
 {}
Temptrees {}
Q {}
R {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
S empty {}
R empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
U empty {}
V empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
X ok ex [[1 2 3]
 [2 3 0]
 [3 0 8]]
encode X [[1 2 3]
 [2 3 0]
 [3 0 8]]
ok expansion {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 0],
       [3, 0, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 0],
       [3, 0, 2]], dtype=int64)]}}
matrix [[1 2 3]
 [2 3 0]
 [3 0 8]]
indices (array([1, 2], dtype=int64), array([2, 1], dtype=int64))
canEdges [(1, 2, 1)]
result {'[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
subgraph [[1 2 3]
 [2 3 1]
 [3 1 8]]
can subgraph 8$3_1_1_3$#
tree [[1 2 3]
 [2 3 0]
 [3 0 8]]
canTree 8$3_1$2_3$#
subgraph [[1 2 3]
 [2 3 1]
 [3 1 8]]
can subgraph 8$3_1_1_3$#
tree [[1 2 3]
 [2 3 0]
 [3 0 8]]
canTree 8$3_1$2_3$#
eqGraphClass {'[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
expansion X {'[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
Q {'[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
R {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
S empty {'[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
R empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}}
U empty {'[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
V empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
X ok ex [[1 2]
 [2 3]]
encode X [[1 2]
 [2 3]]
ok expansion {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
matrix [[1 2]
 [2 3]]
indices (array([], dtype=int64), array([], dtype=int64))
canEdges []
result {'[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}}
subgraph [[1 2]
 [2 3]]
can subgraph 3$2_1$#
tree [[1 2]
 [2 3]]
canTree 3$2_1$#
eqGraphClass {'[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}}
expansion X {'[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}}
X in [[1 3]
 [3 8]]
C X in [array([[3, 1],
       [1, 8]]), array([[1, 2],
       [2, 3]]), array([[1, 3],
       [3, 8]])]
XX [[1 3]
 [3 8]]
YY [[3 1]
 [1 8]]
can join []
candidates []
XX [[1 3]
 [3 8]]
YY [[1 2]
 [2 3]]
can join [array([[1, 3, 2],
       [3, 8, 0],
       [2, 0, 3]])]
candidates [array([[1, 3, 2],
       [3, 8, 0],
       [2, 0, 3]])]
XX [[1 3]
 [3 8]]
YY [[1 3]
 [3 8]]
can join []
candidates []
temp {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 0],
       [2, 0, 1]], dtype=int64)]}}
S freq {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 0],
       [2, 0, 1]], dtype=int64)]}}
C in
 {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 0],
       [2, 0, 1]], dtype=int64)]}}
Temptrees {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 0],
       [2, 0, 1]], dtype=int64)]}}
X in [[1 3 2]
 [3 8 0]
 [2 0 3]]
C X in [array([[1, 3, 2],
       [3, 8, 0],
       [2, 0, 3]])]
XX [[1 3 2]
 [3 8 0]
 [2 0 3]]
YY [[1 3 2]
 [3 8 0]
 [2 0 3]]
can join []
candidates []
temp {}
S freq {}
C in
 {}
Temptrees {}
Q {}
R {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
S empty {}
R empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
U empty {}
V empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
X ok ex [[1 3 2]
 [3 8 0]
 [2 0 3]]
encode X [[1 3 2]
 [3 8 0]
 [2 0 3]]
ok expansion {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 0],
       [2, 0, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 0],
       [2, 0, 1]], dtype=int64)]}}
matrix [[1 3 2]
 [3 8 0]
 [2 0 3]]
indices (array([1, 2], dtype=int64), array([2, 1], dtype=int64))
canEdges [(1, 2, 1)]
result {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}, '[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
subgraph [[1 3 2]
 [3 8 1]
 [2 1 3]]
can subgraph 8$3_1_1_3$#
tree [[1 3 2]
 [3 8 0]
 [2 0 3]]
canTree 8$3_1$2_3$#
subgraph [[1 3 2]
 [3 8 1]
 [2 1 3]]
can subgraph 8$3_1_1_3$#
tree [[1 3 2]
 [3 8 0]
 [2 0 3]]
canTree 8$3_1$2_3$#
eqGraphClass {'[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
expansion X {'[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
Q {'[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
R {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
S empty {'[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
R empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}}
U empty {'[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
V empty {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
X ok ex [[1 3]
 [3 8]]
encode X [[1 3]
 [3 8]]
ok expansion {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
matrix [[1 3]
 [3 8]]
indices (array([], dtype=int64), array([], dtype=int64))
canEdges []
result {'[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
subgraph [[1 3]
 [3 8]]
can subgraph 8$3_1$#
tree [[1 3]
 [3 8]]
canTree 8$3_1$#
eqGraphClass {'[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
expansion X {'[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
Q {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}
R {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}, '[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}}
final results ({'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 1]\n [3 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 3 2]\n [3 8 1]\n [2 1 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}}, {'[[3 1]\n [1 8]]': {0: [array([[0, 1],
       [1, 1]], dtype=int64)], 1: [array([[0, 1],
       [1, 1]], dtype=int64)], 2: [array([[0, 1],
       [1, 1]], dtype=int64)], 3: [array([[1, 1],
       [1, 2]], dtype=int64)]}, '[[1 2]\n [2 3]]': {0: [array([[2, 2],
       [2, 0]], dtype=int64)], 1: [array([[3, 2],
       [2, 0]], dtype=int64)], 2: [array([[2, 2],
       [2, 0]], dtype=int64)], 3: [array([[3, 2],
       [2, 1]], dtype=int64)]}, '[[1 2 0]\n [2 3 1]\n [0 1 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 2 3]\n [2 3 0]\n [3 0 8]]': {0: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 1: [array([[3, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 2: [array([[2, 2, 3],
       [2, 0, 1],
       [3, 1, 1]], dtype=int64)], 3: [array([[3, 2, 3],
       [2, 1, 1],
       [3, 1, 2]], dtype=int64)]}, '[[1 3]\n [3 8]]': {0: [array([[2, 3],
       [3, 1]], dtype=int64)], 1: [array([[3, 3],
       [3, 1]], dtype=int64)], 2: [array([[2, 3],
       [3, 1]], dtype=int64)], 3: [array([[3, 3],
       [3, 2]], dtype=int64)]}, '[[1 3 2]\n [3 8 0]\n [2 0 3]]': {0: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 1: [array([[3, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 2: [array([[2, 3, 2],
       [3, 1, 1],
       [2, 1, 0]], dtype=int64)], 3: [array([[3, 3, 2],
       [3, 2, 1],
       [2, 1, 1]], dtype=int64)]}})
